# -*- mode: shell-script -*-

[[ -n "${debug}" ]] && echo "${BASH_SOURCE}"

[[ -f ~/.bash/bash_prvm ]] && source ~/.bash/bash_prvm

function delete-path
{
    PATH="$( echo "${PATH}" | \
	     sed -e "s%^${1%/}:%%" -e "s%:${1%/}:%:%g" -e "s%:${1%/}\$%%" )"
}

function append-path
{
    delete-path "${1%/}"
    PATH="${PATH}:${1%/}"
}

function start-postgres()
{
    # Use prepend here to avoid Mac OS X's versions :-P
    prepend-path $local_base/pgsql/bin
}

function stop-postgres()
{
    delete-path $local_base/pgsql/bin
}

function start-epkg()
{
    append-path /gsa/ausgsa/projects/c/cjhs/labr
}

function stop-epkg()
{
    delete-path /gsa/ausgsa/projects/c/cjhs/labr
}

function stop-gsa()
{
    true
}

function start-gsa()
{
    true
}

function stop-dfs()
{
    delete-path /usr/contrib/bin
    delete-path /usr/prod/bin
}

function start-dfs()
{
    append-path /usr/contrib/bin
    append-path /usr/prod/bin
}


function stop-afs()
{
    delete-path /usr/afs/bin
    delete-path /afs/austin/local/bin
}

function start-afs()
{
    append-path /usr/afs/bin
    append-path /afs/austin/local/bin
}

function stop-v4()
{
    delete-path /gsa/ausgsa/projects/a/aix/project/ode/bin
}

function start-v4()
{
    append-path /gsa/ausgsa/projects/a/aix/project/ode/bin
    CDPATH="$( echo "${CDPATH}" | sed -e 's%:[^:]*/sb/[^:]*%%g' )"
    CDPATH="$( echo "${CDPATH}" | sed -e 's%:[^:]*/clone/[^:]*%%g' )"
    CDPATH="${CDPATH}:${SOURCEBASE}"
}

function start-rp2()
{
    append-path /gsa/ausgsa/projects/a/aixtools/bin
}

function stop-rp2()
{
    delete-path /gsa/ausgsa/projects/a/aixtools/bin
}

function stop-cmvc()
{
    unset CMVC_FAMILY
    unset CMVC_BECOME
    unset CMVC_RELEASE
    unset CMVC_TOP
    unset PROD
    delete-path $local_base/cmvc/bin
}

function start-cmvc()
{
    local cmvc_release="$CMVC_RELEASE"
    stop-cmvc
    export CMVC_RELEASE="$cmvc_release"
    if [[ -z "$CMVC_RELEASE" ]] ; then
	export CMVC_RELEASE=bos530
	export blob="$blob 1"
    fi
    export CMVC_TOP=$BASE
    export PROD=bos
    export CMVC_FAMILY=aix
    export CMVC_BECOME=pedzan
    append-path ${cmvc_base:-${local_base}/cmvc/bin}
}

function stop-retain()
{
    if [[ -n "${HPATH}" ]] ; then
	delete-path "${HPATH}"
    fi

    unset CENTER
    unset HPATH
    unset LPMRDB
    unset NOTPBQS
    unset PMRDB
    unset RETAREA
    unset RETNAME
    unset RETID
    unset RETQUEUE
    unset RET_PSAR

    if alias retain >& /dev/null ; then
	unalias retain
    fi
}

function start-retain()
{
    local hpath="${HPATH:-/gsa/ausgsa/projects/s/service/usr/bin/retain/}"
    stop-retain

    export CENTER=165
    export HPATH="$hpath"
    export LPMRDB=/home/pedzan/pmrs.local
    export NOTPBQS="gaudin,165 ptty,165"
    export PMRDB
    export RETAREA=1QUA
    export RETNAME="Perry Smith (pedz,165)"
    export RETID=305356
    export RETQUEUE=pedz,165
    export RET_PSAR=1
    export NQ="ptty,165"
    export SCROWNER="Perry Smith T/L 363-8630"
    export SCRTEAM="ptty,165"

    append-path "${HPATH}"
    alias retain='hlogin -q ${RETQUEUE} -r ${RETID}'
}

function back()
{
    /bin/pwd | sed -e "s%$( cd $BASE; /bin/pwd )%$BASE/link%"
}

function dcd ()
{
    local cmd="$1"
    shift
    case $# in
	0) builtin "$cmd";;
	1) builtin "$cmd" "$1";;
	2)  local where=$( echo "${PWD}" | sed -e "s%$1%$2%" );
	    echo "${where}";
	    builtin "$cmd" "${where}";;
	*) echo "Too many arguments to $cmd" 1>&2
	    return 1;;
    esac
    local result=$?
    return $result
}

function put-local-last ()
{
    delete-path $local_base/bin
    append-path $local_base/bin
}

function clean_path
{
    # set -x
    # make_log "clean_path: $1"

    # .. at the front should not get consumed by .. later on
    # the dotdot_index is the index of the last leading dotdot
    typeset -i arg_index=0 result_index=-1 dotdot_index=-1
    typeset arg_array result_array

    # We set IFS to / to split the path into an array
    typeset TIFS="$IFS"
    IFS=/
    declare -a arg_array=( $1 )

    typeset -i arg_length="${#arg_array[*]}"
    while [[ $arg_index -lt $arg_length ]] ; do
	typeset comp="${arg_array[$arg_index]}"
        # a dotdot eats the last component except when it would eat
        # another dotdot
	if [[ "$comp" == "." ]] ; then
	    true
	elif [[ "$comp" == ".." && $result_index -gt $dotdot_index ]] ; then
	    unset result_array[$result_index]
	    let "result_index = result_index - 1"
	else
	    let "result_index = result_index + 1"
	    result_array[$result_index]="$comp"
	    if [[ "$comp" == ".." || "$comp" == "" ]] ; then
		let "dotdot_index = dotdot_index + 1"
	    fi
	fi
	let "arg_index = arg_index + 1"
    done
    typeset result="${result_array[*]}"
    IFS="$TIFS"
    if [[ "$result" = "" ]] ; then
        # /a/.. results in "" which needs to be changed to /
	if [[ $result_index -eq 0 ]] ; then
	    result=/
        # a/.. results in "" which needs to be changed to .
	else
	    result=.
	fi
    fi
    # make_log "clean_path result=$result"
    echo "$result"
}

function absolute_path
{
    typeset path="$1"
    typeset prefix="$2"
    
    if [[ "$path" =~ ^/.* ]] ; then
	echo hi
    else
	path="$prefix/$path"
    fi
    clean_path "$path"
}

function gsa_logger_file()
{
    typeset logger_file=/tc/user1/pedzan/.gsa_logger
    if [[ ! -r "${logger_file}" ]] ; then
	hostname=$( hostname )
	logger_file=/tc/user1/pedzan/.gsa/${hostname%%.*}
	if [[ ! -r "${logger_file}" ]] ; then
	    logger_file=""
	fi
    fi
    if [[ -z "${logger_file}" && -r ~/.gsa/${hostname%%.*} ]] ; then
	logger_file=~/.gsa/"${hostname%%.*}"
    fi
    echo $logger_file
}

function autolog()
{
    if [[ -z "$GSA_MAGIC" ]] ; then
        typeset logger_file=$( gsa_logger_file )
	if [[ -n "${logger_file}" ]] ; then
	    # set -x
	    unset level
	    export GSA_MAGIC=$1
	    shift
	    exec gsa_logger -c ausgsa pedzan "${logger_file}" ${GSA_MAGIC#-} bash -li "$@"
	fi
    fi
    if [[ -n "${PS1}" ]] ; then
	echo "Not GSA authenticated"
    fi
}

function term-title()
{
  printf "\033]0;%s\007" "$1"
}

function need-return-leave()
{
  if [[ -z "$PS1" || -z "$tty" ]] ; then
    return 1
  fi

  local today="$(last | head -1 | awk '{ printf("%s %s\n", $4, $5); }')"
  if last | head -500 | grep "$USER.*$today" | grep -v $tty | grep -q 'still logged in' ; then
    return 1
  fi 2> /dev/null
  return 0
}

function kill-last-return()
{
    tail -1 ~/.timelog | grep -q Return &&
	ed - ~/.timelog << \EOF
$d
w
q
EOF
    
}

function first-return()
{
    need-return-leave &&
	tail -1 ~/.timelog | grep -q Leaving &&
	Returning
}

function last-leave()
{
    need-return-leave &&
	tail -1 ~/.timelog | grep -q Return &&
	Leaving
}

# Takes a pmr 12345,abc,xyz and goes to the ecurep directory for that
# PMR
function e-goto
{
  cd "$( echo "$1" | tr 'a-z' 'A-Z' | sed -e 's%^\(.\)\(.\)\(.*\)$%/ecurep/pmr/\1/\2/\1\2\3%' )"
}

function mkFILES
{
  rm -f .files
  find "$PWD" -xdev -type f -print | sort -u -o .files
}

function clean-os-gunk
{
    unset $( env | awk -F= '/OS_/ { print $1; }' )
}

function login-WDC1
{
    clean-os-gunk
    source ~/bin/WDC1.sh
}

function change_color
{
    osascript ~/.bash/terminal_change_color.scpt
}
